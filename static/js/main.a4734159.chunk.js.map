{"version":3,"sources":["store/types.ts","store/reducer.ts","store/store.ts","api.ts","store/actions.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionTypes","FilterTypes","TODOS_LOAD","SET_VISIBILITY_FILTER","RANDOMIZE_TODOS","LOAD_USER","CLEAR_USER","DELETE_TODO","TOGGLE_COMPLETED","initialState","todos","visibilityFilter","SHOW_ALL","currentUser","rootReducer","combineReducers","reducer","state","action","type","payload","data","filter","sort","Math","random","filteredTodos","todo","id","newTodos","map","completed","store","configureStore","API_URL","getTodos","a","fetch","response","json","getUser","TodoList","memo","useState","query","setQuery","useSelector","SHOW_ACTIVE","SHOW_COMPLETED","visibleTodos","useMemo","title","toLowerCase","includes","dispatch","useDispatch","handleDelete","useCallback","removeTodo","handleSelectChange","event","target","value","handleInputChange","handleCheckboxChange","toggleCompleted","randomize","setUser","jsonData","userLoad","className","onChange","onClick","length","classNames","checked","userId","CurrentUser","clear","name","email","phone","App","useEffect","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4734159.chunk.js","sourcesContent":["export enum ActionTypes {\n  TODOS_LOAD = 'TODOS_LOAD',\n  SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER',\n  RANDOMIZE_TODOS = 'RANDOMIZE_TODOS',\n  LOAD_USER = 'USER_LOAD',\n  CLEAR_USER = 'CLEAR_USER',\n  DELETE_TODO = 'REMOVE_TODO',\n  TOGGLE_COMPLETED = 'TOGGLE_COMPLETED',\n}\n\nexport enum FilterTypes {\n  SHOW_ALL = 'SHOW_ALL',\n  SHOW_COMPLETED = 'SHOW_COMPLETED',\n  SHOW_ACTIVE = 'SHOW_ACTIVE',\n}\n","import { AnyAction } from 'redux';\nimport { ActionTypes, FilterTypes } from './types';\nimport { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nconst {\n  TODOS_LOAD,\n  SET_VISIBILITY_FILTER,\n  RANDOMIZE_TODOS,\n  LOAD_USER,\n  CLEAR_USER,\n  DELETE_TODO,\n  TOGGLE_COMPLETED,\n} = ActionTypes;\n\nconst initialState = {\n  todos: [],\n  visibilityFilter: FilterTypes.SHOW_ALL,\n  currentUser: null,\n};\n\ninterface State {\n  todos: Todo[],\n  visibilityFilter: string,\n  currentUser: User | null,\n}\n\nexport const reducer = (state: State = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case TODOS_LOAD:\n      return {\n        ...state,\n        todos: action.payload.data,\n      };\n\n    case SET_VISIBILITY_FILTER:\n      return {\n        ...state,\n        visibilityFilter: action.payload.filter,\n      };\n\n    case RANDOMIZE_TODOS:\n      return {\n        ...state,\n        todos: [...state.todos].sort(() => Math.random() - 0.5),\n      };\n\n    case DELETE_TODO:\n      return (() => {\n        const { todos } = state;\n        const filteredTodos = todos.filter(\n          todo => todo.id !== action.payload.id,\n        );\n\n        return {\n          ...state,\n          todos: filteredTodos,\n        };\n      })();\n\n    case TOGGLE_COMPLETED:\n      return (() => {\n        const { todos } = state;\n        const newTodos = todos.map(\n          todo => {\n            const item = todo.id === action.payload.id\n              ? { ...todo, completed: !todo.completed }\n              : todo;\n\n            return item;\n          },\n        );\n\n        return {\n          ...state,\n          todos: newTodos,\n        };\n      })();\n\n    case LOAD_USER:\n      return {\n        ...state,\n        currentUser: action.payload.data,\n      };\n\n    case CLEAR_USER:\n      return {\n        ...state,\n        currentUser: null,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { reducer } from './reducer';\n\nconst rootReducer = combineReducers({\n  reducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const store = configureStore({\n  reducer: rootReducer,\n});\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst API_URL = 'https://mate.academy/students-api/';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (id: number): Promise<User> => {\n  const response = await fetch(`${API_URL}/users/${id}`);\n\n  return response.json();\n};\n","import { Dispatch } from 'redux';\nimport { ActionTypes } from './types';\nimport { getTodos, getUser } from '../api';\n\nconst {\n  TODOS_LOAD,\n  SET_VISIBILITY_FILTER,\n  RANDOMIZE_TODOS,\n  LOAD_USER,\n  CLEAR_USER,\n  DELETE_TODO,\n  TOGGLE_COMPLETED,\n} = ActionTypes;\n\nexport const todosLoad = () => {\n  return async (dispatch: Dispatch) => {\n    const jsonData = await getTodos();\n\n    dispatch({\n      type: TODOS_LOAD,\n      payload: { data: jsonData },\n    });\n  };\n};\n\nexport const setVisibilityFilter = (filter: string) => {\n  return {\n    type: SET_VISIBILITY_FILTER,\n    payload: { filter },\n  };\n};\n\nexport const randomizeTodos = () => {\n  return {\n    type: RANDOMIZE_TODOS,\n  };\n};\n\nexport const toggleCompleted = (id: number) => {\n  return {\n    type: TOGGLE_COMPLETED,\n    payload: { id },\n  };\n};\n\nexport const userLoad = (id: number) => {\n  return async (dispatch: Dispatch) => {\n    const jsonData = await getUser(id);\n\n    dispatch({\n      type: LOAD_USER,\n      payload: { data: jsonData },\n    });\n  };\n};\n\nexport const clearUser = () => {\n  return {\n    type: CLEAR_USER,\n  };\n};\n\nexport const removeTodo = (id: number) => {\n  return {\n    type: DELETE_TODO,\n    payload: { id },\n  };\n};\n","import {\n  FC,\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n  ChangeEvent,\n} from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  randomizeTodos,\n  removeTodo,\n  setVisibilityFilter,\n  toggleCompleted,\n  userLoad,\n} from '../../store/actions';\nimport { Todo } from '../../types/Todo';\nimport { RootState } from '../../store/store';\nimport { User } from '../../types/User';\nimport { FilterTypes } from '../../store/types';\nimport './TodoList.scss';\n\nexport const TodoList: FC = memo(() => {\n  const [query, setQuery] = useState('');\n\n  const todos: Todo[] = useSelector(\n    (state: RootState) => state.reducer.todos,\n  );\n\n  const visibilityFilter: string = useSelector(\n    (state: RootState) => state.reducer.visibilityFilter,\n  );\n\n  const currentUser: User = useSelector(\n    (state: RootState) => state.reducer.currentUser,\n  );\n\n  const { SHOW_ALL, SHOW_ACTIVE, SHOW_COMPLETED } = FilterTypes;\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const filteredTodos = todo.title.toLowerCase().includes(query);\n\n      switch (visibilityFilter) {\n        case SHOW_ALL:\n          return filteredTodos;\n\n        case SHOW_COMPLETED:\n          return filteredTodos && todo.completed;\n\n        case SHOW_ACTIVE:\n\n          return filteredTodos && !todo.completed;\n\n        default:\n          return filteredTodos;\n      }\n    });\n  }, [visibilityFilter, todos, query]);\n\n  const dispatch = useDispatch();\n\n  const handleDelete = useCallback((id: number) => {\n    dispatch(removeTodo(id));\n  }, []);\n\n  const handleSelectChange = useCallback((\n    event: ChangeEvent<HTMLSelectElement>,\n  ) => {\n    dispatch(setVisibilityFilter(event.target.value));\n  }, []);\n\n  const handleInputChange = useCallback((\n    event: ChangeEvent<HTMLInputElement>,\n  ) => {\n    setQuery(event.target.value);\n  }, []);\n\n  const handleCheckboxChange = useCallback((id: number) => {\n    dispatch(toggleCompleted(id));\n  }, []);\n\n  const randomize = useCallback(() => {\n    dispatch(randomizeTodos());\n  }, []);\n\n  const setUser = useCallback((id: number) => {\n    dispatch(userLoad(id));\n  }, []);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__control\">\n        <label className=\"TodoList__filter-by-title\">\n          Filter by title:\n          <input\n            type=\"text\"\n            data-cy=\"filterByTitle\"\n            value={query}\n            onChange={handleInputChange}\n          />\n        </label>\n\n        <select\n          className=\"TodoList__filter-by-completed\"\n          value={visibilityFilter}\n          onChange={handleSelectChange}\n        >\n          <option value={SHOW_ALL}>All</option>\n          <option value={SHOW_ACTIVE}>Active</option>\n          <option value={SHOW_COMPLETED}>Completed</option>\n        </select>\n\n        <button\n          type=\"button\"\n          className=\"button button__random\"\n          onClick={randomize}\n        >\n          Randomize\n        </button>\n      </div>\n\n      <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n        {!!visibleTodos.length && visibleTodos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames(\n              'TodoList__item',\n              { 'TodoList__item--checked': todo.completed },\n              { 'TodoList__item--unchecked': !todo.completed },\n            )}\n          >\n            <div className=\"TodoList__todo\">\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={todo.completed}\n                  onChange={() => handleCheckboxChange(todo.id)}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              {todo.userId && (\n                <button\n                  className={classNames('TodoList__user-button', 'button',\n                    {\n                      'TodoList__user-button--selected':\n                      currentUser && currentUser.id === todo.userId,\n                    })}\n                  type=\"button\"\n                  data-cy=\"userButton\"\n                  onClick={() => setUser(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              )}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"button button-x\"\n              onClick={() => handleDelete(todo.id)}\n            >\n              &times;\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n","import { FC, memo, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { clearUser } from '../../store/actions';\nimport { RootState } from '../../store/store';\nimport { User } from '../../types/User';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: FC = memo(() => {\n  const currentUser: User | null = useSelector((state: RootState) => {\n    const { reducer } = state;\n\n    return reducer.currentUser;\n  });\n\n  const dispatch = useDispatch();\n\n  const clear = useCallback(() => {\n    dispatch(clearUser());\n  }, []);\n\n  return (\n    <>\n      {currentUser && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${currentUser.id}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n            {currentUser.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {currentUser.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {currentUser.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            onClick={clear}\n            className=\"CurrentUser__clear button\"\n          >\n            Clear\n          </button>\n        </div>\n      )}\n    </>\n  );\n});\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { todosLoad } from './store/actions';\nimport { RootState } from './store/store';\nimport { User } from './types/User';\nimport './App.scss';\n\nconst App = () => {\n  const currentUser: User | null = useSelector(\n    (state: RootState) => state.reducer.currentUser,\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(todosLoad());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {currentUser ? (\n              <CurrentUser />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { BrowserRouter } from 'react-router-dom';\n\nimport { store } from './store/store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}